/**
 * API V3 - Data Etat - Budget
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { APIError } from '../model/aPIError';
// @ts-ignore
import { APISuccessAnnotatedEnrichedFlattenFinancialLinesPydanticFromMarshmallowSchemaAnnotationTSchema } from '../model/aPISuccessAnnotatedEnrichedFlattenFinancialLinesPydanticFromMarshmallowSchemaAnnotationTSchema';
// @ts-ignore
import { APISuccessListInt } from '../model/aPISuccessListInt';
// @ts-ignore
import { LignesResponse } from '../model/lignesResponse';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { financialDataV3Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    LignesFinancieresServiceInterface
} from './lignesFinancieres.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class LignesFinancieresService extends BaseService implements LignesFinancieresServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: financialDataV3Configuration) {
        super(basePath, configuration);
    }

    /**
     * Recupère la plage des années pour lesquelles les données budgetaires courent.
     * @param sourceRegion 
     * @param dataSource 
     * @param source 
     * @param colonnes 
     * @param page 
     * @param pageSize 
     * @param sortBy 
     * @param sortOrder 
     * @param search 
     * @param fieldsSearch 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAnneesLignesAnneesGet(sourceRegion?: string, dataSource?: string, source?: string, colonnes?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', search?: string, fieldsSearch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<APISuccessListInt>;
    public getAnneesLignesAnneesGet(sourceRegion?: string, dataSource?: string, source?: string, colonnes?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', search?: string, fieldsSearch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<APISuccessListInt>>;
    public getAnneesLignesAnneesGet(sourceRegion?: string, dataSource?: string, source?: string, colonnes?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', search?: string, fieldsSearch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<APISuccessListInt>>;
    public getAnneesLignesAnneesGet(sourceRegion?: string, dataSource?: string, source?: string, colonnes?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', search?: string, fieldsSearch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sourceRegion, 'source_region');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dataSource, 'data_source');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>source, 'source');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>colonnes, 'colonnes');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortBy, 'sort_by');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortOrder, 'sort_order');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>search, 'search');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fieldsSearch, 'fields_search');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/lignes/annees`;
        return this.httpClient.request<APISuccessListInt>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Récupére les infos budgetaires en fonction de son identifiant technique
     * @param id 
     * @param sourceRegion 
     * @param dataSource 
     * @param source 
     * @param colonnes 
     * @param page 
     * @param pageSize 
     * @param sortBy 
     * @param sortOrder 
     * @param search 
     * @param fieldsSearch 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLignesFinancieresBySourceLignesIdGet(id: number, sourceRegion?: string, dataSource?: string, source?: string, colonnes?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', search?: string, fieldsSearch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<APISuccessAnnotatedEnrichedFlattenFinancialLinesPydanticFromMarshmallowSchemaAnnotationTSchema>;
    public getLignesFinancieresBySourceLignesIdGet(id: number, sourceRegion?: string, dataSource?: string, source?: string, colonnes?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', search?: string, fieldsSearch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<APISuccessAnnotatedEnrichedFlattenFinancialLinesPydanticFromMarshmallowSchemaAnnotationTSchema>>;
    public getLignesFinancieresBySourceLignesIdGet(id: number, sourceRegion?: string, dataSource?: string, source?: string, colonnes?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', search?: string, fieldsSearch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<APISuccessAnnotatedEnrichedFlattenFinancialLinesPydanticFromMarshmallowSchemaAnnotationTSchema>>;
    public getLignesFinancieresBySourceLignesIdGet(id: number, sourceRegion?: string, dataSource?: string, source?: string, colonnes?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', search?: string, fieldsSearch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getLignesFinancieresBySourceLignesIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sourceRegion, 'source_region');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dataSource, 'data_source');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>source, 'source');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>colonnes, 'colonnes');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortBy, 'sort_by');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortOrder, 'sort_order');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>search, 'search');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fieldsSearch, 'fields_search');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/lignes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}`;
        return this.httpClient.request<APISuccessAnnotatedEnrichedFlattenFinancialLinesPydanticFromMarshmallowSchemaAnnotationTSchema>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Récupére les lignes financières, mécanisme de grouping pour récupérer les montants agrégés
     * @param sourceRegion 
     * @param dataSource 
     * @param source 
     * @param nEj 
     * @param codeProgramme 
     * @param niveauGeo 
     * @param codeGeo 
     * @param refQpv 
     * @param codeQpv 
     * @param theme 
     * @param beneficiaireCode Siret du bénéficiaire
     * @param beneficiaireCategorieJuridiqueType Type de la catégorie juridique du bénéficiaire
     * @param annee 
     * @param centresCouts 
     * @param domaineFonctionnel 
     * @param referentielProgrammation 
     * @param tags 
     * @param grouping 
     * @param grouped 
     * @param colonnes 
     * @param page 
     * @param pageSize 
     * @param sortBy 
     * @param sortOrder 
     * @param search 
     * @param fieldsSearch 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLignesFinancieresLignesGet(sourceRegion?: string, dataSource?: string, source?: string, nEj?: string, codeProgramme?: string, niveauGeo?: string, codeGeo?: string, refQpv?: 2015 | 2024, codeQpv?: string, theme?: string, beneficiaireCode?: string, beneficiaireCategorieJuridiqueType?: string, annee?: string, centresCouts?: string, domaineFonctionnel?: string, referentielProgrammation?: string, tags?: string, grouping?: string, grouped?: string, colonnes?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', search?: string, fieldsSearch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<LignesResponse>;
    public getLignesFinancieresLignesGet(sourceRegion?: string, dataSource?: string, source?: string, nEj?: string, codeProgramme?: string, niveauGeo?: string, codeGeo?: string, refQpv?: 2015 | 2024, codeQpv?: string, theme?: string, beneficiaireCode?: string, beneficiaireCategorieJuridiqueType?: string, annee?: string, centresCouts?: string, domaineFonctionnel?: string, referentielProgrammation?: string, tags?: string, grouping?: string, grouped?: string, colonnes?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', search?: string, fieldsSearch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<LignesResponse>>;
    public getLignesFinancieresLignesGet(sourceRegion?: string, dataSource?: string, source?: string, nEj?: string, codeProgramme?: string, niveauGeo?: string, codeGeo?: string, refQpv?: 2015 | 2024, codeQpv?: string, theme?: string, beneficiaireCode?: string, beneficiaireCategorieJuridiqueType?: string, annee?: string, centresCouts?: string, domaineFonctionnel?: string, referentielProgrammation?: string, tags?: string, grouping?: string, grouped?: string, colonnes?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', search?: string, fieldsSearch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<LignesResponse>>;
    public getLignesFinancieresLignesGet(sourceRegion?: string, dataSource?: string, source?: string, nEj?: string, codeProgramme?: string, niveauGeo?: string, codeGeo?: string, refQpv?: 2015 | 2024, codeQpv?: string, theme?: string, beneficiaireCode?: string, beneficiaireCategorieJuridiqueType?: string, annee?: string, centresCouts?: string, domaineFonctionnel?: string, referentielProgrammation?: string, tags?: string, grouping?: string, grouped?: string, colonnes?: string, page?: number, pageSize?: number, sortBy?: string, sortOrder?: 'asc' | 'desc', search?: string, fieldsSearch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sourceRegion, 'source_region');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dataSource, 'data_source');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>source, 'source');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>nEj, 'n_ej');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>codeProgramme, 'code_programme');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>niveauGeo, 'niveau_geo');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>codeGeo, 'code_geo');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>refQpv, 'ref_qpv');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>codeQpv, 'code_qpv');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>theme, 'theme');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>beneficiaireCode, 'beneficiaire_code');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>beneficiaireCategorieJuridiqueType, 'beneficiaire_categorieJuridique_type');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>annee, 'annee');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>centresCouts, 'centres_couts');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>domaineFonctionnel, 'domaine_fonctionnel');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>referentielProgrammation, 'referentiel_programmation');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>tags, 'tags');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>grouping, 'grouping');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>grouped, 'grouped');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>colonnes, 'colonnes');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortBy, 'sort_by');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortOrder, 'sort_order');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>search, 'search');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fieldsSearch, 'fields_search');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/lignes`;
        return this.httpClient.request<LignesResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
